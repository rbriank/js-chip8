module.exports = {
  CLS: () => 'cls',
  RET: () => 'ret',
  SYS: (addr) => `sys 0x${addr.toString(16).padStart(3, '0')}`,
  JP: (addr) => `jp 0x${addr.toString(16).padStart(3, '0')}`,
  CALL: (addr) => `call 0x${addr.toString(16).padStart(3, '0')}`,
  SE: (x, kk) => `se v${x.toString(16)}, 0x${kk.toString(16).padStart(2, '0')}`,
  SNE: (x, kk) => `sne v${x.toString(16)}, 0x${kk.toString(16).padStart(2, '0')}`,
  SE_XY: (x, y) => `se v${x.toString(16)}, v${y.toString(16)}`,
  LD: (x, kk) => `ld v${x.toString(16)}, 0x${kk.toString(16).padStart(2, '0')}`,
  ADD: (x, kk) => `add v${x.toString(16)}, 0x${kk.toString(16).padStart(2, '0')}`,
  LD_XY: (x, y) => `ld v${x.toString(16)}, v${y.toString(16)}`,
  OR_XY: (x, y) => `or v${x.toString(16)}, v${y.toString(16)}`,
  AND_XY: (x, y) => `and v${x.toString(16)}, v${y.toString(16)}`,
  XOR_XY: (x, y) => `xor v${x.toString(16)}, v${y.toString(16)}`,
  ADD_XY: (x, y) => `add v${x.toString(16)}, v${y.toString(16)}`,
  SUB_XY: (x, y) => `sub v${x.toString(16)}, v${y.toString(16)}`,
  SHR_XY: (x, y) => `sub v${x.toString(16)} {, v${y.toString(16)}}`,
  SUBN_XY: (x, y) => `subn v${x.toString(16)}, v${y.toString(16)}`,
  SHL_XY: (x, y) => `shl v${x.toString(16)} {, v${y.toString(16)}}`,
  SNE_XY: (x, y) => `sne v${x.toString(16)}, v${y.toString(16)}`,
  LD_I: (addr) => `ld i, 0x${addr.toString(16).padStart(3, '0')}`,
  JP_V0: (addr) => `jp v0, ${addr.toString(16).padStart(3, '0')}`,
  RND: (x, kk) => `rnd v${x.toString(16)}, 0x${kk.toString(16).padStart(2, '0')}`,
  DRW: (x, y, n) => `drw v${x.toString(16)}, v${y.toString(16)}, 0x${n.toString(16)}`,
  SKP: (x) => `skp v${x.toString(16)}`,
  SKNP: (x) => `sknp v${x.toString(16)}`,
  LD_XDT: (x) => `ld v${x.toString(16)}, dt`,
  LD_XK: (x) => `ld v${x.toString(16)}, k`,
  LD_DTX: (x) => `ld dt, v${x.toString(16)}`,
  LD_STX: (x) => `ld st, v${x.toString(16)}`,
  ADD_IX: (x) => `add i, v${x.toString(16)}`,
  LD_FX: (x) => `add f, v${x.toString(16)}`,
  LD_BX: (x) => `add b, v${x.toString(16)}`,
  LD_IX: (x) => `add [i], v${x.toString(16)}`,
  LD_XI: (x) => `add v${x.toString(16)}, [i]`,
}
